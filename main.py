import cv2
import numpy as np
from insightface.app import FaceAnalysis
from deepface import DeepFace
from openvino.runtime import Core

# ----------- 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω ------------

# InsightFace: —Ç–æ–ø–æ–≤–∞ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±–ª–∏—á—á—è —Ç–∞ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤
face_app = FaceAnalysis(name='buffalo_l', providers=['CPUExecutionProvider'])
face_app.prepare(ctx_id=0)

# OpenVINO: –º–æ–¥–µ–ª—ñ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –æ–¥—è–≥—É (Gender/Age/Clothes)
core = Core()
# –ê–±—Å–æ–ª—é—Ç–Ω–∏–π –∞–±–æ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö –¥–æ .xml
age_gender_model = core.read_model(model="models/intel/age-gender-recognition-retail-0013/FP32/age-gender-recognition-retail-0013.xml")
age_gender_compiled = core.compile_model(model=age_gender_model, device_name="CPU")
attr_model = core.read_model(model="models/intel/person-attributes-recognition-crossroad-0230/FP32/person-attributes-recognition-crossroad-0230.xml")
attr_compiled = core.compile_model(model=attr_model, device_name="CPU")

# ----------- 2. –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ -----------

def confident_label(score, label, threshold=0.75):
    if score is None:
        return "–Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ"
    return label if score >= threshold else "–Ω–µ–≤–ø–µ–≤–Ω–µ–Ω–æ"

# ----------- 3. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ -----------

img = cv2.imread("photo.jpg")
faces = face_app.get(img)

results = []
for face in faces:
    box = face.bbox.astype(int)
    cropped_face = img[box[1]:box[3], box[0]:box[2]]

    # InsightFace –∞—Ç—Ä–∏–±—É—Ç–∏ + –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å
    sex = confident_label(getattr(face, "sex_score", None), "—á–æ–ª–æ–≤—ñ–∫" if face.sex == 1 else "–∂—ñ–Ω–∫–∞")
    age = int(face.age)
    glasses = confident_label(getattr(face, "glasses_score", None), "—î" if face.glasses else "–Ω–µ–º–∞—î")
    beard = confident_label(getattr(face, "beard_score", None), "—î" if face.beard else "–Ω–µ–º–∞—î")
    emotion = getattr(face, "emotion", "–Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ")
    liveness = confident_label(getattr(face, 'liveness_score', 1.0), "–∂–∏–≤–∏–π")
    pose = getattr(face, "pose", "–Ω–µ–≤—ñ–¥–æ–º–æ")
    mask = "—î" if getattr(face, 'mask', False) else "–Ω–µ–º–∞—î"

    # DeepFace –¥–ª—è ensemble
    deep = DeepFace.analyze(cropped_face, actions=['age', 'gender', 'emotion', 'race'], enforce_detection=False)
    deep_attr = deep[0] if isinstance(deep, list) else deep
    gender_deep = deep_attr.get("gender", "–Ω–µ–≤—ñ–¥–æ–º–æ")
    age_deep = deep_attr.get("age", "–Ω–µ–≤—ñ–¥–æ–º–æ")
    emotion_deep = deep_attr.get("dominant_emotion", "–Ω–µ–≤—ñ–¥–æ–º–æ")
    race_deep = deep_attr.get("dominant_race", "–Ω–µ–≤—ñ–¥–æ–º–æ")

    # OpenVINO: –∞—Ç—Ä–∏–±—É—Ç–∏ –ª—é–¥–∏–Ω–∏ (–æ–¥—è–≥, –∞–∫—Å–µ—Å—É–∞—Ä–∏, —Å—Ç–∞—Ç—å, –≤—ñ–∫)
    # person-attributes-recognition-crossroad-0230: shape=(1,3,160,80)
    resized_person = cv2.resize(img, (80, 160))  # width=80, height=160
    input_blob = np.expand_dims(resized_person.transpose(2, 0, 1), axis=0)  # [1, 3, 160, 80]
    attr_results = attr_compiled([input_blob])
    # –†–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –º–∞—Å–∏–≤ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π
    keys = ["—Å—Ç–∞—Ç—å (OpenVINO)", "—Å—É–º–∫–∞", "–∫–∞–ø–µ–ª—é—Ö", "–¥–æ–≤–≥—ñ —Ä—É–∫–∞–≤–∏", "–¥–æ–≤–≥—ñ —à—Ç–∞–Ω–∏", "–¥–æ–≤–≥–µ –≤–æ–ª–æ—Å—Å—è", "–∫—É—Ä—Ç–∫–∞/–ø—ñ–¥–∂–∞–∫", "—Å–æ–Ω—Ü–µ–∑–∞—Ö–∏—Å–Ω—ñ –æ–∫—É–ª—è—Ä–∏"]
    person_attr = {k: ("—î" if v > 0.75 else "–Ω–µ–º–∞—î") for k, v in zip(keys, attr_results[0][0])}

    # OpenVINO age-gender-recognition-retail-0013: shape=(1,3,62,62)
    age_gender_input = cv2.resize(cropped_face, (62, 62))
    age_gender_input = np.expand_dims(age_gender_input.transpose(2, 0, 1), axis=0)
    ag_results = age_gender_compiled([age_gender_input])
    # –í—ñ–∫ ‚Äî –≤–∏—Ö—ñ–¥ age_conv3 (–∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ 0 –¥–æ 1, –º–Ω–æ–∂–∏–º–æ –Ω–∞ 100)
    openvino_age = int(ag_results["age_conv3"][0][0][0][0] * 100)
    # –°—Ç–∞—Ç—å ‚Äî –≤–∏—Ö—ñ–¥ prob: [male_score, female_score]
    male_score, female_score = ag_results["prob"][0]
    openvino_gender = "—á–æ–ª–æ–≤—ñ–∫" if male_score > female_score else "–∂—ñ–Ω–∫–∞"

    # ----------- 4. –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å—Ç–∞—Ç—ñ -----------

    genders = [
        str(sex),
        str(gender_deep),
        str(person_attr.get("—Å—Ç–∞—Ç—å (OpenVINO)", "–Ω–µ–≤—ñ–¥–æ–º–æ")),
        str(openvino_gender)
    ]
    gender_final = max(set(genders), key=genders.count)

    # ----------- 5. –ó–±—ñ—Ä —É—Å—ñ—Ö –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ -----------

    results.append({
        "–æ–±–ª–∞—Å—Ç—å_–æ–±–ª–∏—á—á—è": box.tolist(),
        "—Å—Ç–∞—Ç—å (ensemble, –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è)": gender_final,
        "—Å—Ç–∞—Ç—å (InsightFace)": sex,
        "—Å—Ç–∞—Ç—å (DeepFace)": gender_deep,
        "—Å—Ç–∞—Ç—å (OpenVINO)": person_attr["—Å—Ç–∞—Ç—å (OpenVINO)"],
        "—Å—Ç–∞—Ç—å (OpenVINO-AG)": openvino_gender,
        "–≤—ñ–∫ (InsightFace)": age,
        "–≤—ñ–∫ (DeepFace)": age_deep,
        "–≤—ñ–∫ (OpenVINO)": openvino_age,
        "–æ–∫—É–ª—è—Ä–∏": glasses,
        "–±–æ—Ä–æ–¥–∞": beard,
        "–µ–º–æ—Ü—ñ—è (InsightFace)": emotion,
        "–µ–º–æ—Ü—ñ—è (DeepFace)": emotion_deep,
        "—Ä–∞—Å–∞ (DeepFace)": race_deep,
        "–∂–∏–≤—ñ—Å—Ç—å": liveness,
        "–ø–æ–∑–∞ –≥–æ–ª–æ–≤–∏": pose,
        "–º–∞—Å–∫–∞ –Ω–∞ –æ–±–ª–∏—á—á—ñ": mask,
        "–æ–¥—è–≥ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏ (OpenVINO)": {k: v for k, v in person_attr.items() if k != "—Å—Ç–∞—Ç—å (OpenVINO)"}
    })

# ----------- 6. –í–∏–≤—ñ–¥ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ -----------

def pretty_gender(g):
    # –Ø–∫—â–æ —Ü–µ dict (–π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ), —Ç–æ –±–µ—Ä–µ–º–æ –∫–ª—é—á –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é
    if isinstance(g, dict):
        if not g:
            return "–Ω–µ–≤—ñ–¥–æ–º–æ"
        key = max(g, key=lambda x: g[x])
        value = g[key]
        return f"{key} ({value:.2f}%)"
    return str(g)

def pretty_attrs(res):
    lines = []
    lines.append(f"üßë‚Äçüíº –ê—Ç—Ä–∏–±—É—Ç–∏ –æ—Å–æ–±–∏:")
    lines.append(f"  üì¶ –û–±–ª–∞—Å—Ç—å –æ–±–ª–∏—á—á—è: {res.get('–æ–±–ª–∞—Å—Ç—å_–æ–±–ª–∏—á—á—è')}")
    lines.append(f"  üë§ –°—Ç–∞—Ç—å (ensemble, –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è): {pretty_gender(res.get('—Å—Ç–∞—Ç—å (ensemble, –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è)'))}")
    lines.append(f"  ‚îú‚îÄ InsightFace: {pretty_gender(res.get('—Å—Ç–∞—Ç—å (InsightFace)'))}")
    lines.append(f"  ‚îú‚îÄ DeepFace: {pretty_gender(res.get('—Å—Ç–∞—Ç—å (DeepFace)'))}")
    lines.append(f"  ‚îú‚îÄ OpenVINO (person): {pretty_gender(res.get('—Å—Ç–∞—Ç—å (OpenVINO)'))}")
    lines.append(f"  ‚îî‚îÄ OpenVINO-AG: {pretty_gender(res.get('—Å—Ç–∞—Ç—å (OpenVINO-AG)'))}")
    lines.append(f"  üéÇ –í—ñ–∫ (InsightFace): {res.get('–≤—ñ–∫ (InsightFace)')}")
    lines.append(f"  ‚îú‚îÄ DeepFace: {res.get('–≤—ñ–∫ (DeepFace)')}")
    lines.append(f"  ‚îî‚îÄ OpenVINO: {res.get('–≤—ñ–∫ (OpenVINO)')}")
    lines.append(f"  üëì –û–∫—É–ª—è—Ä–∏: {res.get('–æ–∫—É–ª—è—Ä–∏')}")
    lines.append(f"  üßî –ë–æ—Ä–æ–¥–∞: {res.get('–±–æ—Ä–æ–¥–∞')}")
    lines.append(f"  üòä –ï–º–æ—Ü—ñ—è (InsightFace): {res.get('–µ–º–æ—Ü—ñ—è (InsightFace)')}")
    lines.append(f"  ‚îî‚îÄ DeepFace: {res.get('–µ–º–æ—Ü—ñ—è (DeepFace)')}")
    lines.append(f"  üåé –†–∞—Å–∞ (DeepFace): {res.get('—Ä–∞—Å–∞ (DeepFace)')}")
    lines.append(f"  üë§ –ñ–∏–≤—ñ—Å—Ç—å: {res.get('–∂–∏–≤—ñ—Å—Ç—å')}")
    lines.append(f"  üß≠ –ü–æ–∑–∞ –≥–æ–ª–æ–≤–∏: {res.get('–ø–æ–∑–∞ –≥–æ–ª–æ–≤–∏')}")
    lines.append(f"  üò∑ –ú–∞—Å–∫–∞ –Ω–∞ –æ–±–ª–∏—á—á—ñ: {res.get('–º–∞—Å–∫–∞ –Ω–∞ –æ–±–ª–∏—á—á—ñ')}")
    lines.append(f"  üëï –û–¥—è–≥ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏ (OpenVINO):")
    for k, v in res.get('–æ–¥—è–≥ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏ (OpenVINO)', {}).items():
        lines.append(f"    ‚îî‚îÄ {k}: {v}")
    return "\n".join(lines)

# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
print(pretty_attrs(results[0]))