import cv2
import numpy as np
from insightface.app import FaceAnalysis
from deepface import DeepFace
from openvino.runtime import Core

# ----------- 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω ------------

face_app = FaceAnalysis(name='buffalo_l', providers=['CPUExecutionProvider'])
face_app.prepare(ctx_id=0)

core = Core()
age_gender_model = core.read_model(model="models/intel/age-gender-recognition-retail-0013/FP32/age-gender-recognition-retail-0013.xml")
age_gender_compiled = core.compile_model(model=age_gender_model, device_name="CPU")
attr_model = core.read_model(model="models/intel/person-attributes-recognition-crossroad-0230/FP32/person-attributes-recognition-crossroad-0230.xml")
attr_compiled = core.compile_model(model=attr_model, device_name="CPU")
emotion_model = core.read_model(model="models/intel/emotions-recognition-retail-0003/FP32/emotions-recognition-retail-0003.xml")
emotion_compiled = core.compile_model(model=emotion_model, device_name="CPU")

# –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —ñ–Ω—à–∏—Ö –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ API, ONNX, PyTorch, etc (FairFace, DeepFashion, OpenPose, etc)
# –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó ‚Äî –∑–∞–ª–∏—à–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —â–æ–± –ª–µ–≥–∫–æ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –º–æ–¥–µ–ª—å

# ----------- 2. –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ —Ç–∞ ensemble -----------

def confident_label(score, label, threshold=0.75):
    if score is None:
        return "–Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ"
    return label if score >= threshold else "–Ω–µ–≤–ø–µ–≤–Ω–µ–Ω–æ"

def fairface_predict(crop):
    # Placeholder for FairFace API/model
    # –ü–æ–≤–µ—Ä—Ç–∞—î dict: {"gender": ..., "age": ..., "race": ...}
    return {"gender": None, "age": None, "race": None}

def deepfashion_predict(crop):
    # Placeholder for DeepFashion API/model
    # –ü–æ–≤–µ—Ä—Ç–∞—î dict: {"clothes_type": ..., "clothes_color": ...}
    return {"clothes_type": None, "clothes_color": None}

def beauty_score_predict(crop):
    # Placeholder for BeautyNet/FaceQuality
    return None

def hairnet_predict(crop):
    # Placeholder for HairNet (—Å—Ç–∏–ª—å —Ç–∞ –∫–æ–ª—ñ—Ä –≤–æ–ª–æ—Å—Å—è)
    return {"hair_style": None, "hair_color": None}

def skin_status_predict(crop):
    # Placeholder for SkinNet (—Å—Ç–∞–Ω —à–∫—ñ—Ä–∏)
    return None

def jewellery_predict(crop):
    # Placeholder for JewelleryNet
    return None

def smile_predict(crop):
    # Placeholder for SmileNet
    return None

def makeup_predict(crop):
    # Placeholder for MakeupNet
    return None

def height_weight_estimate(pose):
    # Placeholder for estimate via skeleton/pose models
    return {"height": None, "weight": None}

# ----------- 3. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ —ñ –æ–±—Ä–æ–±–∫–∞ -----------

img = cv2.imread("photo.jpg")
faces = face_app.get(img)

results = []
for face in faces:
    box = face.bbox.astype(int)
    cropped_face = img[box[1]:box[3], box[0]:box[2]]

    # InsightFace
    sex = confident_label(getattr(face, "sex_score", None), "—á–æ–ª–æ–≤—ñ–∫" if face.sex == 1 else "–∂—ñ–Ω–∫–∞")
    age = int(face.age)
    glasses = confident_label(getattr(face, "glasses_score", None), "—î" if face.glasses else "–Ω–µ–º–∞—î")
    beard = confident_label(getattr(face, "beard_score", None), "—î" if face.beard else "–Ω–µ–º–∞—î")
    emotion = getattr(face, "emotion", "–Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ")
    liveness = confident_label(getattr(face, 'liveness_score', 1.0), "–∂–∏–≤–∏–π")
    pose = getattr(face, "pose", "–Ω–µ–≤—ñ–¥–æ–º–æ")
    mask = "—î" if getattr(face, 'mask', False) else "–Ω–µ–º–∞—î"

    # DeepFace
    deep = DeepFace.analyze(cropped_face, actions=['age', 'gender', 'emotion', 'race'], enforce_detection=False)
    deep_attr = deep[0] if isinstance(deep, list) else deep
    gender_deep = deep_attr.get("gender", "–Ω–µ–≤—ñ–¥–æ–º–æ")
    age_deep = deep_attr.get("age", "–Ω–µ–≤—ñ–¥–æ–º–æ")
    emotion_deep = deep_attr.get("dominant_emotion", "–Ω–µ–≤—ñ–¥–æ–º–æ")
    race_deep = deep_attr.get("dominant_race", "–Ω–µ–≤—ñ–¥–æ–º–æ")

    # FairFace
    fairface_attr = fairface_predict(cropped_face)
    gender_fairface = fairface_attr.get("gender")
    age_fairface = fairface_attr.get("age")
    race_fairface = fairface_attr.get("race")

    # OpenVINO: person-attributes
    resized_person = cv2.resize(img, (80, 160))
    input_blob = np.expand_dims(resized_person.transpose(2, 0, 1), axis=0)
    attr_results = attr_compiled([input_blob])
    keys = ["—Å—Ç–∞—Ç—å (OpenVINO)", "—Å—É–º–∫–∞", "–∫–∞–ø–µ–ª—é—Ö", "–¥–æ–≤–≥—ñ —Ä—É–∫–∞–≤–∏", "–¥–æ–≤–≥—ñ —à—Ç–∞–Ω–∏", "–¥–æ–≤–≥–µ –≤–æ–ª–æ—Å—Å—è", "–∫—É—Ä—Ç–∫–∞/–ø—ñ–¥–∂–∞–∫", "—Å–æ–Ω—Ü–µ–∑–∞—Ö–∏—Å–Ω—ñ –æ–∫—É–ª—è—Ä–∏"]
    person_attr = {k: ("—î" if v > 0.75 else "–Ω–µ–º–∞—î") for k, v in zip(keys, attr_results[0][0])}

    # OpenVINO: age-gender-recognition
    age_gender_input = cv2.resize(cropped_face, (62, 62))
    age_gender_input = np.expand_dims(age_gender_input.transpose(2, 0, 1), axis=0)
    ag_results = age_gender_compiled([age_gender_input])
    openvino_age = int(ag_results["age_conv3"][0][0][0][0] * 100)
    male_score, female_score = ag_results["prob"][0]
    openvino_gender = "—á–æ–ª–æ–≤—ñ–∫" if male_score > female_score else "–∂—ñ–Ω–∫–∞"

    # OpenVINO: emotion-recognition
    emotion_input = cv2.resize(cropped_face, (64, 64))
    emotion_input = np.expand_dims(emotion_input.transpose(2, 0, 1), axis=0)
    emotion_results = emotion_compiled([emotion_input])
    emotions_list = ["neutral", "happy", "sad", "surprise", "anger"]
    emotion_openvino = emotions_list[np.argmax(emotion_results[0][0])] if emotion_results[0][0].size == 5 else "–Ω–µ–≤—ñ–¥–æ–º–æ"

    # DeepFashion
    deepfashion_attr = deepfashion_predict(img)
    clothes_type = deepfashion_attr.get("clothes_type")
    clothes_color = deepfashion_attr.get("clothes_color")

    # HairNet
    hair_attr = hairnet_predict(cropped_face)
    hair_style = hair_attr.get("hair_style")
    hair_color = hair_attr.get("hair_color")

    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–æ–¥–µ–ª—ñ
    skin_status = skin_status_predict(cropped_face)
    beauty_score = beauty_score_predict(cropped_face)
    jewellery = jewellery_predict(cropped_face)
    smile = smile_predict(cropped_face)
    makeup = makeup_predict(cropped_face)
    height_weight = height_weight_estimate(pose)
    height_estimate = height_weight.get("height")
    weight_estimate = height_weight.get("weight")

    # Ensemble gender
    genders = [
        str(sex),
        str(gender_deep),
        str(person_attr.get("—Å—Ç–∞—Ç—å (OpenVINO)", "–Ω–µ–≤—ñ–¥–æ–º–æ")),
        str(openvino_gender),
        str(gender_fairface) if gender_fairface else "",
    ]
    gender_final = max(set(genders), key=genders.count)

    results.append({
        "–æ–±–ª–∞—Å—Ç—å_–æ–±–ª–∏—á—á—è": box.tolist(),
        "—Å—Ç–∞—Ç—å (ensemble, –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è)": gender_final,
        "—Å—Ç–∞—Ç—å (InsightFace)": sex,
        "—Å—Ç–∞—Ç—å (DeepFace)": gender_deep,
        "—Å—Ç–∞—Ç—å (FairFace)": gender_fairface,
        "—Å—Ç–∞—Ç—å (OpenVINO)": person_attr["—Å—Ç–∞—Ç—å (OpenVINO)"],
        "—Å—Ç–∞—Ç—å (OpenVINO-AG)": openvino_gender,
        "–≤—ñ–∫ (InsightFace)": age,
        "–≤—ñ–∫ (DeepFace)": age_deep,
        "–≤—ñ–∫ (FairFace)": age_fairface,
        "–≤—ñ–∫ (OpenVINO)": openvino_age,
        "—Ä–∞—Å–∞ (DeepFace)": race_deep,
        "—Ä–∞—Å–∞ (FairFace)": race_fairface,
        "–æ–∫—É–ª—è—Ä–∏": glasses,
        "—Å–æ–Ω—Ü–µ–∑–∞—Ö–∏—Å–Ω—ñ –æ–∫—É–ª—è—Ä–∏": person_attr.get("—Å–æ–Ω—Ü–µ–∑–∞—Ö–∏—Å–Ω—ñ –æ–∫—É–ª—è—Ä–∏"),
        "–±–æ—Ä–æ–¥–∞": beard,
        "–∑–∞—á—ñ—Å–∫–∞": hair_style,
        "–∫–æ–ª—ñ—Ä –≤–æ–ª–æ—Å—Å—è": hair_color,
        "–µ–º–æ—Ü—ñ—è (InsightFace)": emotion,
        "–µ–º–æ—Ü—ñ—è (DeepFace)": emotion_deep,
        "–µ–º–æ—Ü—ñ—è (OpenVINO)": emotion_openvino,
        "–∂–∏–≤—ñ—Å—Ç—å": liveness,
        "–ø–æ—Å–º—ñ—à–∫–∞": smile,
        "–º–∞–∫—ñ—è–∂": makeup,
        "—Å—Ç–∞–Ω —à–∫—ñ—Ä–∏": skin_status,
        "–µ—Å—Ç–µ—Ç–∏—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞": beauty_score,
        "–ø—Ä–∏–∫—Ä–∞—Å–∏": jewellery,
        "—Ç–∏–ø –æ–¥—è–≥—É": clothes_type,
        "–∫–æ–ª—ñ—Ä –æ–¥—è–≥—É": clothes_color,
        "–æ–¥—è–≥ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏ (OpenVINO)": {k: v for k, v in person_attr.items() if k != "—Å—Ç–∞—Ç—å (OpenVINO)"},
        "–ø–æ–∑–∞ –≥–æ–ª–æ–≤–∏": pose,
        "–º–∞—Å–∫–∞ –Ω–∞ –æ–±–ª–∏—á—á—ñ": mask,
        "–∑—Ä—ñ—Å—Ç (–æ—Ü—ñ–Ω–∫–∞)": height_estimate,
        "–≤–∞–≥–∞ (–æ—Ü—ñ–Ω–∫–∞)": weight_estimate
    })

# ----------- 4. –ö—Ä–∞—Å–∏–≤–∏–π –≤–∏–≤—ñ–¥ -----------

def pretty_gender(g):
    if isinstance(g, dict):
        if not g:
            return "–Ω–µ–≤—ñ–¥–æ–º–æ"
        key = max(g, key=lambda x: g[x])
        value = g[key]
        return f"{key} ({value:.2f}%)"
    return str(g)

def pretty_attrs(res):
    lines = []
    lines.append(f"üßë‚Äçüíº –ê—Ç—Ä–∏–±—É—Ç–∏ –æ—Å–æ–±–∏:")
    lines.append(f"  üì¶ –û–±–ª–∞—Å—Ç—å –æ–±–ª–∏—á—á—è: {res.get('–æ–±–ª–∞—Å—Ç—å_–æ–±–ª–∏—á—á—è')}")
    lines.append(f"  üë§ –°—Ç–∞—Ç—å (ensemble, –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è): {pretty_gender(res.get('—Å—Ç–∞—Ç—å (ensemble, –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è)'))}")
    lines.append(f"  ‚îú‚îÄ InsightFace: {pretty_gender(res.get('—Å—Ç–∞—Ç—å (InsightFace)'))}")
    lines.append(f"  ‚îú‚îÄ DeepFace: {pretty_gender(res.get('—Å—Ç–∞—Ç—å (DeepFace)'))}")
    lines.append(f"  ‚îú‚îÄ FairFace: {pretty_gender(res.get('—Å—Ç–∞—Ç—å (FairFace)'))}")
    lines.append(f"  ‚îú‚îÄ OpenVINO (person): {pretty_gender(res.get('—Å—Ç–∞—Ç—å (OpenVINO)'))}")
    lines.append(f"  ‚îî‚îÄ OpenVINO-AG: {pretty_gender(res.get('—Å—Ç–∞—Ç—å (OpenVINO-AG)'))}")
    lines.append(f"  üéÇ –í—ñ–∫ (InsightFace): {res.get('–≤—ñ–∫ (InsightFace)')}")
    lines.append(f"  ‚îú‚îÄ DeepFace: {res.get('–≤—ñ–∫ (DeepFace)')}")
    lines.append(f"  ‚îú‚îÄ FairFace: {res.get('–≤—ñ–∫ (FairFace)')}")
    lines.append(f"  ‚îî‚îÄ OpenVINO: {res.get('–≤—ñ–∫ (OpenVINO)')}")
    lines.append(f"  üåé –†–∞—Å–∞ (DeepFace): {res.get('—Ä–∞—Å–∞ (DeepFace)')}")
    lines.append(f"  ‚îî‚îÄ FairFace: {res.get('—Ä–∞—Å–∞ (FairFace)')}")
    lines.append(f"  üëì –û–∫—É–ª—è—Ä–∏: {res.get('–æ–∫—É–ª—è—Ä–∏')}")
    lines.append(f"  üï∂Ô∏è –°–æ–Ω—Ü–µ–∑–∞—Ö–∏—Å–Ω—ñ –æ–∫—É–ª—è—Ä–∏: {res.get('—Å–æ–Ω—Ü–µ–∑–∞—Ö–∏—Å–Ω—ñ –æ–∫—É–ª—è—Ä–∏')}")
    lines.append(f"  üßî –ë–æ—Ä–æ–¥–∞: {res.get('–±–æ—Ä–æ–¥–∞')}")
    lines.append(f"  üíá –ó–∞—á—ñ—Å–∫–∞: {res.get('–∑–∞—á—ñ—Å–∫–∞')}")
    lines.append(f"  üé® –ö–æ–ª—ñ—Ä –≤–æ–ª–æ—Å—Å—è: {res.get('–∫–æ–ª—ñ—Ä –≤–æ–ª–æ—Å—Å—è')}")
    lines.append(f"  üòä –ï–º–æ—Ü—ñ—è (InsightFace): {res.get('–µ–º–æ—Ü—ñ—è (InsightFace)')}")
    lines.append(f"  ‚îú‚îÄ DeepFace: {res.get('–µ–º–æ—Ü—ñ—è (DeepFace)')}")
    lines.append(f"  ‚îî‚îÄ OpenVINO: {res.get('–µ–º–æ—Ü—ñ—è (OpenVINO)')}")
    lines.append(f"  üë§ –ñ–∏–≤—ñ—Å—Ç—å: {res.get('–∂–∏–≤—ñ—Å—Ç—å')}")
    lines.append(f"  üòÅ –ü–æ—Å–º—ñ—à–∫–∞: {res.get('–ø–æ—Å–º—ñ—à–∫–∞')}")
    lines.append(f"  üíÑ –ú–∞–∫—ñ—è–∂: {res.get('–º–∞–∫—ñ—è–∂')}")
    lines.append(f"  üß¥ –°—Ç–∞–Ω —à–∫—ñ—Ä–∏: {res.get('—Å—Ç–∞–Ω —à–∫—ñ—Ä–∏')}")
    lines.append(f"  üèÖ –ï—Å—Ç–µ—Ç–∏—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞: {res.get('–µ—Å—Ç–µ—Ç–∏—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞')}")
    lines.append(f"  üíç –ü—Ä–∏–∫—Ä–∞—Å–∏: {res.get('–ø—Ä–∏–∫—Ä–∞—Å–∏')}")
    lines.append(f"  üëï –¢–∏–ø –æ–¥—è–≥—É: {res.get('—Ç–∏–ø –æ–¥—è–≥—É')}")
    lines.append(f"  üé® –ö–æ–ª—ñ—Ä –æ–¥—è–≥—É: {res.get('–∫–æ–ª—ñ—Ä –æ–¥—è–≥—É')}")
    lines.append(f"  üëö –û–¥—è–≥ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏ (OpenVINO):")
    for k, v in res.get('–æ–¥—è–≥ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏ (OpenVINO)', {}).items():
        lines.append(f"    ‚îî‚îÄ {k}: {v}")
    lines.append(f"  üß≠ –ü–æ–∑–∞ –≥–æ–ª–æ–≤–∏: {res.get('–ø–æ–∑–∞ –≥–æ–ª–æ–≤–∏')}")
    lines.append(f"  üò∑ –ú–∞—Å–∫–∞ –Ω–∞ –æ–±–ª–∏—á—á—ñ: {res.get('–º–∞—Å–∫–∞ –Ω–∞ –æ–±–ª–∏—á—á—ñ')}")
    lines.append(f"  üìè –ó—Ä—ñ—Å—Ç (–æ—Ü—ñ–Ω–∫–∞): {res.get('–∑—Ä—ñ—Å—Ç (–æ—Ü—ñ–Ω–∫–∞)')}")
    lines.append(f"  ‚öñÔ∏è –í–∞–≥–∞ (–æ—Ü—ñ–Ω–∫–∞): {res.get('–≤–∞–≥–∞ (–æ—Ü—ñ–Ω–∫–∞)')}")
    return "\n".join(lines)

for res in results:
    print(pretty_attrs(res))