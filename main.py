import cv2
import numpy as np
import os
from insightface.app import FaceAnalysis
from deepface import DeepFace
from openvino.runtime import Core

face_app = FaceAnalysis(name='buffalo_l', providers=['CPUExecutionProvider'])
face_app.prepare(ctx_id=0)

core = Core()
age_gender_model = core.read_model(model="models/intel/age-gender-recognition-retail-0013/FP32/age-gender-recognition-retail-0013.xml")
age_gender_compiled = core.compile_model(model=age_gender_model, device_name="CPU")
attr_model = core.read_model(model="models/intel/person-attributes-recognition-crossroad-0230/FP32/person-attributes-recognition-crossroad-0230.xml")
attr_compiled = core.compile_model(model=attr_model, device_name="CPU")
emotion_model = core.read_model(model="models/intel/emotions-recognition-retail-0003/FP32/emotions-recognition-retail-0003.xml")
emotion_compiled = core.compile_model(model=emotion_model, device_name="CPU")

def confident_label(score, label, threshold=0.75):
    if score is None:
        return "–Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ"
    return label if score >= threshold else "–Ω–µ–≤–ø–µ–≤–Ω–µ–Ω–æ"

def fairface_predict(crop):
    return {"gender": None, "age": None, "race": None}

def deepfashion_predict(crop):
    return {"clothes_type": None, "clothes_color": None}

def beauty_score_predict(crop):
    return None

def hairnet_predict(crop):
    return {"hair_style": None, "hair_color": None}

def skin_status_predict(crop):
    return None

def jewellery_predict(crop):
    return None

def smile_predict(crop):
    return None

def makeup_predict(crop):
    return None

def height_weight_estimate(pose):
    return {"height": None, "weight": None}

def pretty_attrs(res):
    lines = []
    lines.append(f"<ul>")
    lines.append(f"<li>üì¶ –û–±–ª–∞—Å—Ç—å –æ–±–ª–∏—á—á—è: {res.get('–æ–±–ª–∞—Å—Ç—å_–æ–±–ª–∏—á—á—è')}</li>")
    lines.append(f"<li>üë§ –°—Ç–∞—Ç—å (ensemble, –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è): {res.get('—Å—Ç–∞—Ç—å (ensemble, –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è)')}</li>")
    lines.append(f"<li>InsightFace: {res.get('—Å—Ç–∞—Ç—å (InsightFace)')}</li>")
    lines.append(f"<li>DeepFace: {res.get('—Å—Ç–∞—Ç—å (DeepFace)')}</li>")
    lines.append(f"<li>FairFace: {res.get('—Å—Ç–∞—Ç—å (FairFace)')}</li>")
    lines.append(f"<li>OpenVINO (person): {res.get('—Å—Ç–∞—Ç—å (OpenVINO)')}</li>")
    lines.append(f"<li>OpenVINO-AG: {res.get('—Å—Ç–∞—Ç—å (OpenVINO-AG)')}</li>")
    lines.append(f"<li>üéÇ –í—ñ–∫ (InsightFace): {res.get('–≤—ñ–∫ (InsightFace)')}</li>")
    lines.append(f"<li>DeepFace: {res.get('–≤—ñ–∫ (DeepFace)')}</li>")
    lines.append(f"<li>FairFace: {res.get('–≤—ñ–∫ (FairFace)')}</li>")
    lines.append(f"<li>OpenVINO: {res.get('–≤—ñ–∫ (OpenVINO)')}</li>")
    lines.append(f"<li>üåé –†–∞—Å–∞ (DeepFace): {res.get('—Ä–∞—Å–∞ (DeepFace)')}</li>")
    lines.append(f"<li>FairFace: {res.get('—Ä–∞—Å–∞ (FairFace)')}</li>")
    lines.append(f"<li>üëì –û–∫—É–ª—è—Ä–∏: {res.get('–æ–∫—É–ª—è—Ä–∏')}</li>")
    lines.append(f"<li>üï∂Ô∏è –°–æ–Ω—Ü–µ–∑–∞—Ö–∏—Å–Ω—ñ –æ–∫—É–ª—è—Ä–∏: {res.get('—Å–æ–Ω—Ü–µ–∑–∞—Ö–∏—Å–Ω—ñ –æ–∫—É–ª—è—Ä–∏')}</li>")
    lines.append(f"<li>üßî –ë–æ—Ä–æ–¥–∞: {res.get('–±–æ—Ä–æ–¥–∞')}</li>")
    lines.append(f"<li>üíá –ó–∞—á—ñ—Å–∫–∞: {res.get('–∑–∞—á—ñ—Å–∫–∞')}</li>")
    lines.append(f"<li>üé® –ö–æ–ª—ñ—Ä –≤–æ–ª–æ—Å—Å—è: {res.get('–∫–æ–ª—ñ—Ä –≤–æ–ª–æ—Å—Å—è')}</li>")
    lines.append(f"<li>üòä –ï–º–æ—Ü—ñ—è (InsightFace): {res.get('–µ–º–æ—Ü—ñ—è (InsightFace)')}</li>")
    lines.append(f"<li>DeepFace: {res.get('–µ–º–æ—Ü—ñ—è (DeepFace)')}</li>")
    lines.append(f"<li>OpenVINO: {res.get('–µ–º–æ—Ü—ñ—è (OpenVINO)')}</li>")
    lines.append(f"<li>üë§ –ñ–∏–≤—ñ—Å—Ç—å: {res.get('–∂–∏–≤—ñ—Å—Ç—å')}</li>")
    lines.append(f"<li>üòÅ –ü–æ—Å–º—ñ—à–∫–∞: {res.get('–ø–æ—Å–º—ñ—à–∫–∞')}</li>")
    lines.append(f"<li>üíÑ –ú–∞–∫—ñ—è–∂: {res.get('–º–∞–∫—ñ—è–∂')}</li>")
    lines.append(f"<li>üß¥ –°—Ç–∞–Ω —à–∫—ñ—Ä–∏: {res.get('—Å—Ç–∞–Ω —à–∫—ñ—Ä–∏')}</li>")
    lines.append(f"<li>üèÖ –ï—Å—Ç–µ—Ç–∏—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞: {res.get('–µ—Å—Ç–µ—Ç–∏—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞')}</li>")
    lines.append(f"<li>üíç –ü—Ä–∏–∫—Ä–∞—Å–∏: {res.get('–ø—Ä–∏–∫—Ä–∞—Å–∏')}</li>")
    lines.append(f"<li>üëï –¢–∏–ø –æ–¥—è–≥—É: {res.get('—Ç–∏–ø –æ–¥—è–≥—É')}</li>")
    lines.append(f"<li>üé® –ö–æ–ª—ñ—Ä –æ–¥—è–≥—É: {res.get('–∫–æ–ª—ñ—Ä –æ–¥—è–≥—É')}</li>")
    lines.append(f"<li>üëö –û–¥—è–≥ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏ (OpenVINO):")
    for k, v in res.get('–æ–¥—è–≥ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏ (OpenVINO)', {}).items():
        lines.append(f"{k}: {v} ")
    lines.append(f"</li>")
    lines.append(f"<li>üß≠ –ü–æ–∑–∞ –≥–æ–ª–æ–≤–∏: {res.get('–ø–æ–∑–∞ –≥–æ–ª–æ–≤–∏')}</li>")
    lines.append(f"<li>üò∑ –ú–∞—Å–∫–∞ –Ω–∞ –æ–±–ª–∏—á—á—ñ: {res.get('–º–∞—Å–∫–∞ –Ω–∞ –æ–±–ª–∏—á—á—ñ')}</li>")
    lines.append(f"<li>üìè –ó—Ä—ñ—Å—Ç (–æ—Ü—ñ–Ω–∫–∞): {res.get('–∑—Ä—ñ—Å—Ç (–æ—Ü—ñ–Ω–∫–∞)')}</li>")
    lines.append(f"<li>‚öñÔ∏è –í–∞–≥–∞ (–æ—Ü—ñ–Ω–∫–∞): {res.get('–≤–∞–≥–∞ (–æ—Ü—ñ–Ω–∫–∞)')}</li>")
    lines.append(f"</ul>")
    return "\n".join(lines)

photo_dir = "photo"
supported_ext = ('.jpg', '.jpeg', '.png', '.bmp', '.tiff')

results_all = []

for filename in os.listdir(photo_dir):
    if not filename.lower().endswith(supported_ext):
        continue
    img_path = os.path.join(photo_dir, filename)
    img = cv2.imread(img_path)
    if img is None:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ {img_path}")
        continue

    faces = face_app.get(img)
    results = []
    for face in faces:
        box = face.bbox.astype(int)
        y1, y2 = max(box[1], 0), min(box[3], img.shape[0])
        x1, x2 = max(box[0], 0), min(box[2], img.shape[1])
        cropped_face = img[y1:y2, x1:x2]
        if cropped_face is None or cropped_face.size == 0:
            continue

        sex = confident_label(getattr(face, "sex_score", None), "—á–æ–ª–æ–≤—ñ–∫" if face.sex == 1 else "–∂—ñ–Ω–∫–∞")
        age = int(face.age)
        glasses = confident_label(getattr(face, "glasses_score", None), "—î" if face.glasses else "–Ω–µ–º–∞—î")
        beard = confident_label(getattr(face, "beard_score", None), "—î" if face.beard else "–Ω–µ–º–∞—î")
        emotion = getattr(face, "emotion", "–Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ")
        liveness = confident_label(getattr(face, 'liveness_score', 1.0), "–∂–∏–≤–∏–π")
        pose = getattr(face, "pose", "–Ω–µ–≤—ñ–¥–æ–º–æ")
        mask = "—î" if getattr(face, 'mask', False) else "–Ω–µ–º–∞—î"

        deep = DeepFace.analyze(cropped_face, actions=['age', 'gender', 'emotion', 'race'], enforce_detection=False)
        if isinstance(deep, list):
            deep_attr = deep[0] if len(deep) > 0 else {}
        else:
            deep_attr = deep if deep is not None else {}
        gender_deep = deep_attr.get("gender", "–Ω–µ–≤—ñ–¥–æ–º–æ")
        age_deep = deep_attr.get("age", "–Ω–µ–≤—ñ–¥–æ–º–æ")
        emotion_deep = deep_attr.get("dominant_emotion", "–Ω–µ–≤—ñ–¥–æ–º–æ")
        race_deep = deep_attr.get("dominant_race", "–Ω–µ–≤—ñ–¥–æ–º–æ")

        fairface_attr = fairface_predict(cropped_face)
        gender_fairface = fairface_attr.get("gender")
        age_fairface = fairface_attr.get("age")
        race_fairface = fairface_attr.get("race")

        resized_person = cv2.resize(img, (80, 160))
        input_blob = np.expand_dims(resized_person.transpose(2, 0, 1), axis=0)
        attr_results = attr_compiled([input_blob])
        keys = ["—Å—Ç–∞—Ç—å (OpenVINO)", "—Å—É–º–∫–∞", "–∫–∞–ø–µ–ª—é—Ö", "–¥–æ–≤–≥—ñ —Ä—É–∫–∞–≤–∏", "–¥–æ–≤–≥—ñ —à—Ç–∞–Ω–∏", "–¥–æ–≤–≥–µ –≤–æ–ª–æ—Å—Å—è", "–∫—É—Ä—Ç–∫–∞/–ø—ñ–¥–∂–∞–∫", "—Å–æ–Ω—Ü–µ–∑–∞—Ö–∏—Å–Ω—ñ –æ–∫—É–ª—è—Ä–∏"]
        person_attr = {k: ("—î" if v > 0.75 else "–Ω–µ–º–∞—î") for k, v in zip(keys, attr_results[0][0])}

        if cropped_face is not None and cropped_face.size > 0:
            try:
                age_gender_input = cv2.resize(cropped_face, (62, 62))
                age_gender_input = np.expand_dims(age_gender_input.transpose(2, 0, 1), axis=0)
                ag_results = age_gender_compiled([age_gender_input])
                openvino_age = int(ag_results["age_conv3"][0][0][0][0] * 100)
                male_score, female_score = ag_results["prob"][0]
                openvino_gender = "—á–æ–ª–æ–≤—ñ–∫" if male_score > female_score else "–∂—ñ–Ω–∫–∞"
            except Exception as e:
                openvino_age = None
                openvino_gender = "–Ω–µ–≤—ñ–¥–æ–º–æ"
        else:
            openvino_age = None
            openvino_gender = "–Ω–µ–≤—ñ–¥–æ–º–æ"

        if cropped_face is not None and cropped_face.size > 0:
            try:
                emotion_input = cv2.resize(cropped_face, (64, 64))
                emotion_input = np.expand_dims(emotion_input.transpose(2, 0, 1), axis=0)
                emotion_results = emotion_compiled([emotion_input])
                emotions_list = ["neutral", "happy", "sad", "surprise", "anger"]
                emotion_openvino = emotions_list[np.argmax(emotion_results[0][0])] if emotion_results[0][0].size == 5 else "–Ω–µ–≤—ñ–¥–æ–º–æ"
            except Exception as e:
                emotion_openvino = "–Ω–µ–≤—ñ–¥–æ–º–æ"
        else:
            emotion_openvino = "–Ω–µ–≤—ñ–¥–æ–º–æ"

        deepfashion_attr = deepfashion_predict(img)
        clothes_type = deepfashion_attr.get("clothes_type")
        clothes_color = deepfashion_attr.get("clothes_color")

        hair_attr = hairnet_predict(cropped_face)
        hair_style = hair_attr.get("hair_style")
        hair_color = hair_attr.get("hair_color")

        skin_status = skin_status_predict(cropped_face)
        beauty_score = beauty_score_predict(cropped_face)
        jewellery = jewellery_predict(cropped_face)
        smile = smile_predict(cropped_face)
        makeup = makeup_predict(cropped_face)
        height_weight = height_weight_estimate(pose)
        height_estimate = height_weight.get("height")
        weight_estimate = height_weight.get("weight")

        genders = [
            str(sex),
            str(gender_deep),
            str(person_attr.get("—Å—Ç–∞—Ç—å (OpenVINO)", "–Ω–µ–≤—ñ–¥–æ–º–æ")),
            str(openvino_gender),
            str(gender_fairface) if gender_fairface else "",
        ]
        gender_final = max(set(genders), key=genders.count)

        results.append({
            "–æ–±–ª–∞—Å—Ç—å_–æ–±–ª–∏—á—á—è": box.tolist(),
            "—Å—Ç–∞—Ç—å (ensemble, –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è)": gender_final,
            "—Å—Ç–∞—Ç—å (InsightFace)": sex,
            "—Å—Ç–∞—Ç—å (DeepFace)": gender_deep,
            "—Å—Ç–∞—Ç—å (FairFace)": gender_fairface,
            "—Å—Ç–∞—Ç—å (OpenVINO)": person_attr["—Å—Ç–∞—Ç—å (OpenVINO)"],
            "—Å—Ç–∞—Ç—å (OpenVINO-AG)": openvino_gender,
            "–≤—ñ–∫ (InsightFace)": age,
            "–≤—ñ–∫ (DeepFace)": age_deep,
            "–≤—ñ–∫ (FairFace)": age_fairface,
            "–≤—ñ–∫ (OpenVINO)": openvino_age,
            "—Ä–∞—Å–∞ (DeepFace)": race_deep,
            "—Ä–∞—Å–∞ (FairFace)": race_fairface,
            "–æ–∫—É–ª—è—Ä–∏": glasses,
            "—Å–æ–Ω—Ü–µ–∑–∞—Ö–∏—Å–Ω—ñ –æ–∫—É–ª—è—Ä–∏": person_attr.get("—Å–æ–Ω—Ü–µ–∑–∞—Ö–∏—Å–Ω—ñ –æ–∫—É–ª—è—Ä–∏"),
            "–±–æ—Ä–æ–¥–∞": beard,
            "–∑–∞—á—ñ—Å–∫–∞": hair_style,
            "–∫–æ–ª—ñ—Ä –≤–æ–ª–æ—Å—Å—è": hair_color,
            "–µ–º–æ—Ü—ñ—è (InsightFace)": emotion,
            "–µ–º–æ—Ü—ñ—è (DeepFace)": emotion_deep,
            "–µ–º–æ—Ü—ñ—è (OpenVINO)": emotion_openvino,
            "–∂–∏–≤—ñ—Å—Ç—å": liveness,
            "–ø–æ—Å–º—ñ—à–∫–∞": smile,
            "–º–∞–∫—ñ—è–∂": makeup,
            "—Å—Ç–∞–Ω —à–∫—ñ—Ä–∏": skin_status,
            "–µ—Å—Ç–µ—Ç–∏—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞": beauty_score,
            "–ø—Ä–∏–∫—Ä–∞—Å–∏": jewellery,
            "—Ç–∏–ø –æ–¥—è–≥—É": clothes_type,
            "–∫–æ–ª—ñ—Ä –æ–¥—è–≥—É": clothes_color,
            "–æ–¥—è–≥ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏ (OpenVINO)": {k: v for k, v in person_attr.items() if k != "—Å—Ç–∞—Ç—å (OpenVINO)"},
            "–ø–æ–∑–∞ –≥–æ–ª–æ–≤–∏": pose,
            "–º–∞—Å–∫–∞ –Ω–∞ –æ–±–ª–∏—á—á—ñ": mask,
            "–∑—Ä—ñ—Å—Ç (–æ—Ü—ñ–Ω–∫–∞)": height_estimate,
            "–≤–∞–≥–∞ (–æ—Ü—ñ–Ω–∫–∞)": weight_estimate
        })
    # –î–æ–¥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ —Ñ–æ—Ç–æ
    results_all.append({
        "filename": filename,
        "results": results
    })

# ----------- 4. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML-—Ä–µ–ø–æ—Ä—Ç—É ------------

with open("report.html", "w", encoding="utf-8") as f:
    f.write("<!DOCTYPE html>\n<html>\n<head>\n<meta charset='utf-8'>\n<title>–ê—Ç—Ä–∏–±—É—Ç–∏ —Ñ–æ—Ç–æ</title>\n</head>\n<body>\n")
    f.write("<h1>–§–æ—Ç–æ —ñ —ó—Ö –∞—Ç—Ä–∏–±—É—Ç–∏</h1>\n")
    for photo in results_all:
        fname = photo["filename"]
        f.write(f"<h2>{fname}</h2>\n")
        # –í—Å—Ç–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ (—à–ª—è—Ö –≤—ñ–¥–Ω–æ—Å–Ω–∏–π, —è–∫—â–æ report.html –ø–æ—Ä—É—á —ñ–∑ photo/)
        f.write(f"<img src='photo/{fname}' width='400' style='border:1px solid #ccc'><br>\n")
        if photo["results"]:
            for res in photo["results"]:
                f.write(pretty_attrs(res))
        else:
            f.write("<b>–û–±–ª–∏—á—á—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</b><br>")
        f.write("<hr>")
    f.write("</body></html>\n")

print("report.html –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!")